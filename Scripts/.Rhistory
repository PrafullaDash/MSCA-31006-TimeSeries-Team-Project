CostCap_test<-CostCap_ts['2016-10-01/2016-12-31']
tsdisplay(CostCap_train,ylab="WACC daily traffic",xlab="Day")
tsdisplay(CostCap_test,ylab="WACC daily traffic",xlab="Day")
length(CostCap_test)
#boxcox and differencing the data
CostCap_train <- CostCap[1:540]
CostCap_test <- CostCap[541:550]
CostCap_views_train <- ts(CostCap_train,frequency = 365.25)
CostCap_views_test <- ts(CostCap_test,frequency = 365.25)
autoplot(CostCap_views_train)
#boxcox and differencing the data
CostCap_train <- CostCap[1:540]
CostCap_test <- CostCap[541:550]
CostCap_views_train <- ts(CostCap_train,frequency = 365.25)
CostCap_views_test <- ts(CostCap_test,frequency = 365.25)
BoxCox.lambda(CostCap_views_train)
#boxcox and differencing the data
CostCap_train <- CostCap[1:540]
CostCap_test <- CostCap[541:550]
CostCap_views_train <- ts(CostCap_train,frequency = 365.25)
CostCap_views_test <- ts(CostCap_test,frequency = 365.25)
BoxCox.lambda(CostCap_views_train)
kpss.test(CostCap_views_train)
#boxcox and differencing the data
CostCap_train <- CostCap[1:540]
CostCap_test <- CostCap[541:550]
CostCap_views_train <- ts(CostCap_train,frequency = 365.25)
CostCap_views_test <- ts(CostCap_test,frequency = 365.25)
BoxCox.lambda(CostCap_views_train)
kpss.test(CostCap_views_train)
CostCap_views_train_train_diff <- diff(CostCap_views_train)
#boxcox and differencing the data
CostCap_train <- CostCap[1:540]
CostCap_test <- CostCap[541:550]
CostCap_views_train <- ts(CostCap_train,frequency = 365.25)
CostCap_views_test <- ts(CostCap_test,frequency = 365.25)
BoxCox.lambda(CostCap_views_train)
kpss.test(CostCap_views_train)
CostCap_views_train_train_diff <- diff(CostCap_views_train)
kpss.test(CostCap_views_train_train_diff)
#boxcox and differencing the data
CostCap_train <- CostCap[1:540]
CostCap_test <- CostCap[541:550]
CostCap_views_train <- ts(CostCap_train,frequency = 365.25)
CostCap_views_test <- ts(CostCap_test,frequency = 365.25)
BoxCox.lambda(CostCap_views_train)
kpss.test(CostCap_views_train)
CostCap_views_train_train_diff <- diff(CostCap_views_train)
kpss.test(CostCap_views_train_train_diff)
periodogram(CostCap_views_train_train_diff)
#boxcox and differencing the data
CostCap_train <- CostCap[1:540]
CostCap_test <- CostCap[541:550]
CostCap_views_train <- ts(CostCap_train,frequency = 365.25)
CostCap_views_test <- ts(CostCap_test,frequency = 365.25)
BoxCox.lambda(CostCap_views_train)
kpss.test(CostCap_views_train)
CostCap_views_train_train_diff <- diff(CostCap_views_train)
kpss.test(CostCap_views_train_train_diff)
periodogram(CostCap_views_train_train_diff)
spectrum(CostCap_views_train_train_diff)
#boxcox and differencing the data
CostCap_train <- CostCap[1:540]
CostCap_test <- CostCap[541:550]
CostCap_views_train <- ts(CostCap_train,frequency = 365.25)
CostCap_views_test <- ts(CostCap_test,frequency = 365.25)
BoxCox.lambda(CostCap_views_train)
kpss.test(CostCap_views_train)
CostCap_views_train_train_diff <- diff(CostCap_views_train)
kpss.test(CostCap_views_train_train_diff)
periodogram(CostCap_views_train_train_diff)
spectrum(CostCap_views_train_train_diff)
CostCap__periodogram <- periodogram(CostCap_views_train_train_diff)
#boxcox and differencing the data
CostCap_train <- CostCap[1:540]
CostCap_test <- CostCap[541:550]
CostCap_views_train <- ts(CostCap_train,frequency = 365.25)
CostCap_views_test <- ts(CostCap_test,frequency = 365.25)
BoxCox.lambda(CostCap_views_train)
kpss.test(CostCap_views_train)
CostCap_views_train_train_diff <- diff(CostCap_views_train)
kpss.test(CostCap_views_train_train_diff)
periodogram(CostCap_views_train_train_diff)
spectrum(CostCap_views_train_train_diff)
CostCap_periodogram <- periodogram(CostCap_views_train_train_diff)
high_spectrum <- head(sort(CostCap_periodogram$spec,decreasing = TRUE),10)
high_spectrum
high_spectrum <- head(sort(CostCap_periodogram$spec,decreasing = TRUE),10)
high_spectrum
high_spectrum_indices <- c()
# storing the high spectrum indices
for (i in seq(1:length(high_spectrum))) {
high_spectrum_indices <- append(high_spectrum_indices,match(high_spectrum[i]
,CostCap_periodogram$spec))
}
fundamental_freq <- c()
# storing the frequencies corresponding to the high spectrums
for (i in seq(1:length(high_spectrum_indices))) {
fundamental_freq <- append(fundamental_freq,CostCap_periodogram$freq[high_spectrum_indices[i]])
}
# the fundamental frequencies
fundamental_freq
high_spectrum <- head(sort(CostCap_periodogram$spec,decreasing = TRUE),10)
high_spectrum
high_spectrum_indices <- c()
# storing the high spectrum indices
for (i in seq(1:length(high_spectrum))) {
high_spectrum_indices <- append(high_spectrum_indices,match(high_spectrum[i]
,CostCap_periodogram$spec))
}
fundamental_freq <- c()
# storing the frequencies corresponding to the high spectrums
for (i in seq(1:length(high_spectrum_indices))) {
fundamental_freq <- append(fundamental_freq,CostCap_periodogram$freq[high_spectrum_indices[i]])
}
# the fundamental frequencies
fundamental_freq
# finding and storing the time periods
time_periods <- round(1/fundamental_freq,0)
time_periods
# finding and storing the time periods
m1 <- auto.arima(CostCap_train, xreg = fourier(CostCap_train,K=3),seasonal = FALSE,stationary =FALSE)
# finding and storing the time periods
m1 <- auto.arima(CostCap_train, xreg = fourier(CostCap_train,K=3),seasonal = FALSE,stationary =FALSE)
# finding and storing the time periods
m1 <- auto.arima(CostCap_train, xreg = fourier(CostCap_train,K=2),seasonal = FALSE,stationary =FALSE)
# finding and storing the time periods
m1 <- auto.arima(CostCap_train, xreg = fourier(CostCap_train,K=1),seasonal = FALSE,stationary =FALSE)
# finding and storing the time periods
m1 <- auto.arima(CostCap_train, xreg = fourier(CostCap_train,K=1),seasonal = FALSE)
accuracy(forecast(m8,h=92),CostCap_test)
autoplot(forecast(m8,h=92))
checkresiduals(m8)
# importing the dataset
Google <- data.matrix(train_1[c("Google_zh.wikipedia.org_all-access_spider"),])
dimnames(Google)<-NULL
Google<-array(Google)
time_index <- seq(from = as.POSIXct("2015-07-01"), to = as.POSIXct("2016-12-31"), by = "day")
Google_ts <- xts(Google, order.by =time_index ,frequency = 365.25)
autoplot(Google_ts)
# importing the dataset
IPhone <- data.matrix(train_1[c("IPhone_zh.wikipedia.org_all-access_spider"),])
dimnames(IPhone)<-NULL
IPhone<-array(IPhone)
time_index <- seq(from = as.POSIXct("2015-07-01"), to = as.POSIXct("2016-12-31"), by = "day")
IPhone_ts <- xts(IPhone, order.by =time_index ,frequency = 365.25)
autoplot(IPhone_ts)
# importing the dataset
ASCII <- data.matrix(train_1[c("ASCII_zh.wikipedia.org_all-access_spider"),])
dimnames(ASCII)<-NULL
ASCII<-array(ASCII)
plot(ASCII,type='l')
# visualization
library('ggplot2')
# data manipulation
library('dplyr')
library('readr')
library('imputeTS')
#time series
library('fpp')
library('forecast')
library('xts')
library('zoo')
library(prophet)
library('TSA')
# importing the dataset
train_1 <- read.csv("~/Desktop/UChicago/Quarters/03-Quarters/Data/TS/web-traffic-time-series-forecasting/train_1.csv", header = TRUE, row.names = 1,sep = ",",skip =0)
# importing the dataset
Google <- data.matrix(train_1[c("Google_zh.wikipedia.org_all-access_spider"),])
dimnames(Google)<-NULL
Google<-array(Google)
time_index <- seq(from = as.POSIXct("2015-07-01"), to = as.POSIXct("2016-12-31"), by = "day")
Google_ts <- xts(Google, order.by =time_index ,frequency = 365.25)
autoplot(Google_ts)
# importing the dataset
IPhone <- data.matrix(train_1[c("IPhone_zh.wikipedia.org_all-access_spider"),])
dimnames(IPhone)<-NULL
IPhone<-array(IPhone)
time_index <- seq(from = as.POSIXct("2015-07-01"), to = as.POSIXct("2016-12-31"), by = "day")
IPhone_ts <- xts(IPhone, order.by =time_index ,frequency = 365.25)
autoplot(IPhone_ts)
# importing the dataset
ASCII <- data.matrix(train_1[c("ASCII_zh.wikipedia.org_all-access_spider"),])
dimnames(ASCII)<-NULL
ASCII<-array(ASCII)
plot(ASCII,type='l')
# importing the dataset
IPhone <- data.matrix(train_1[c("IPhone_zh.wikipedia.org_all-access_spider"),])
dimnames(IPhone)<-NULL
IPhone<-array(IPhone)
time_index <- seq(from = as.POSIXct("2015-07-01"), to = as.POSIXct("2016-12-31"), by = "day")
IPhone_ts <- xts(IPhone, order.by =time_index ,frequency = 365.25)
autoplot(IPhone_ts)
# importing the dataset
CostCap <- data.matrix(train_1[c("加权平均资本成本_zh.wikipedia.org_all-access_spider"),])
dimnames(CostCap)<-NULL
CostCap<-array(CostCap)
plot(CostCap,type='l')
time_index <- seq(from = as.POSIXct("2015-07-01"), to = as.POSIXct("2016-12-31"), by = "day")
CostCap_ts <- xts(CostCap, order.by =time_index ,frequency = 365.25)
tsdisplay(CostCap_ts,ylab="WACC daily traffic",xlab="Day")
CostCap_train<-CostCap_ts['2015-07-01/2016-09-30']
CostCap_test<-CostCap_ts['2016-10-01/2016-12-31']
tsdisplay(CostCap_train,ylab="WACC daily traffic",xlab="Day")
tsdisplay(CostCap_test,ylab="WACC daily traffic",xlab="Day")
length(CostCap_test)
kpss.test(CostCap_train)
BoxCox.lambda(CostCap_train)
CostCap_train_boxcox<-CostCap_train %>% BoxCox(lambda = BoxCox.lambda(CostCap_train))
CostCap_train_diff <- diff(CostCap_train_boxcox)
kpss.test(CostCap_train_diff)
tsdisplay(CostCap_train_diff)
#forecast horizon
h<-92
#naive forecasts
CostCap_train_new<-ts(CostCap_ts['2015-07-01/2016-09-30'])
CostCap_test_new<-ts(CostCap_ts['2016-10-01/2016-12-31'])
#evaluating the models
Model_Mean <- meanf(CostCap_train_new, h)
Model_Naive <- naive(CostCap_train_new, h)
Model_Drift <- rwf(CostCap_train_new, h, drift=TRUE)
#Naive forecast
autoplot(CostCap_train_new) +
autolayer(Model_Mean$mean, series="Mean") +
autolayer(Model_Naive$mean, series="Naive") +
autolayer(Model_Drift$mean, series="Drift") +
ggtitle("Forecasts for daily  Weighted average cost of capital Wikepedia Page") +
xlab("Days") + ylab("WACC traffic")
accuracy(Model_Mean,CostCap_test)
accuracy(Model_Naive,CostCap_test)
accuracy(Model_Drift,CostCap_test)
auto.arima(CostCap_train,seasonal = TRUE,lambda = 'auto')
m1<-Arima(CostCap_train,lambda = 'auto',order=c(0,1,1))
checkresiduals(m1)
autoplot(forecast(m1,h=92))
accuracy(forecast(m1,h=92),CostCap_test)
source("~/Desktop/UChicago/Quarters/03-Quarters/03-31006-TimeSeries/03-Week/eacf.r")
#differencing and box cox transforming the training data
CostCap_train_new_boxcox<-CostCap_train_new %>% BoxCox(lambda = BoxCox.lambda(CostCap_train_new))
CostCap_train_new_diff <- diff(CostCap_train_new_boxcox)
eacf(CostCap_train_new_diff)
(Model.ets<-ets(CostCap_train))
autoplot(Model.ets)
checkresiduals(Model.ets)
for (x in 1:50) {
print(x)
}
print(e**x)
print(exp**x)
print(exp(x))
print(X)
print(x)
for (x in 1:50) {
print(x)
print(exp(x))
}
for (x in 1:50) {
print(exp(x))
}
l=[]
for (x in 1:150) {
l.append(exp(x))
}
l=c()
for (x in 1:150) {
append(l,exp(x))
}
l
1:150
l=c()
for (x in 1:150) {
append(l,exp(x))
}
l
l=c()
for (x in 1:150) {
append(l,exp(x))
}
l
l=c()
for (x in 1:150) {
l<-append(l,exp(x))
}
l
m2 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),
m2 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),xreg =data.frame(x=c(rep(0,200),Model.ets$fitted[200:350])
h<-92
m7 <- function(x, h){forecast(Arima(x, order=c(0,1,1),lambda = 'auto'), h=h)}
error_1 <- tsCV(CostCap_ts, m7, h=1)
error_2 <- tsCV(CostCap_ts, m7, h=1, window = 24) # Rolling/Sliding Window
autoplot(error_1, series = 'Expanding Window') +
autolayer(error_2, series = 'Rolling Window')
print(sqrt(mean(error_1^2, na.rm=TRUE)))
print(sqrt(mean(error_2^2, na.rm=TRUE)))
checkresiduals(m8)
# visualization
library('ggplot2')
# data manipulation
library('dplyr')
library('readr')
library('imputeTS')
#time series
library('fpp')
library('forecast')
library('xts')
library('zoo')
library(prophet)
library('TSA')
page_2016_FIFA_Club_World_Cup_views <- data.matrix(read.csv("~/Desktop/UChicago/Quarters/03-Quarters/Data/TS/web-traffic-time-series-forecasting/train_1.csv", header = TRUE, row.names = 1,sep = ",",nrows = 1,skip = 8393))
# removing column names
dimnames(page_2016_FIFA_Club_World_Cup_views) <- NULL
# converting to array
page_2016_FIFA_Club_World_Cup_views <- array(page_2016_FIFA_Club_World_Cup_views)
# checking the values
head(page_2016_FIFA_Club_World_Cup_views)
# no. of ovservations
length(page_2016_FIFA_Club_World_Cup_views)
plot(page_2016_FIFA_Club_World_Cup_views,type = 'l')
time_index <- seq(from = as.POSIXct("2015-07-01"), to = as.POSIXct("2016-12-31"), by = "day")
Fifa_ts <- xts(page_2016_FIFA_Club_World_Cup_views, order.by =time_index ,frequency = 365.25)
autoplot(Fifa_ts)
# splitting to train and test
page_2016_FIFA_Club_World_Cup_views <- page_2016_FIFA_Club_World_Cup_views[1:350]
# converting data to ts
page_2016_FIFA_Club_World_Cup_views <- ts(page_2016_FIFA_Club_World_Cup_views,frequency = 1)
# plotting the time-series
autoplot(page_2016_FIFA_Club_World_Cup_views)
# splitting to train and test
page_2016_FIFA_Club_World_Cup_views <- Fifa_ts['2015-07-01/2016-07-01']
# plotting the time-series
autoplot(page_2016_FIFA_Club_World_Cup_views)
# splitting to train and test
page_2016_FIFA_Club_World_Cup_views <- Fifa_ts['2015-07-01/2016-06-01']
# plotting the time-series
autoplot(page_2016_FIFA_Club_World_Cup_views)
# splitting to train and test
page_2016_FIFA_Club_World_Cup_views <- Fifa_ts['2015-07-01/2016-05-29']
# plotting the time-series
autoplot(page_2016_FIFA_Club_World_Cup_views)
# splitting to train and test
page_2016_FIFA_Club_World_Cup_views <- Fifa_ts['2015-07-01/2016-05-29']
legend(page_2016_FIFA_Club_World_Cup_views)
# splitting to train and test
page_2016_FIFA_Club_World_Cup_views <- Fifa_ts['2015-07-01/2016-05-29']
length(page_2016_FIFA_Club_World_Cup_views)
# plotting the time-series
autoplot(page_2016_FIFA_Club_World_Cup_views)
# splitting to train and test
page_2016_FIFA_Club_World_Cup_views <- Fifa_ts['2015-07-01/2016-05-29']
# plotting the time-series
autoplot(page_2016_FIFA_Club_World_Cup_views)
# splitting
page_2016_FIFA_Club_World_Cup_views_prior <- page_2016_FIFA_Club_World_Cup_views[1:200]
page_2016_FIFA_Club_World_Cup_views_post <- page_2016_FIFA_Club_World_Cup_views[201:334]
autoplot(page_2016_FIFA_Club_World_Cup_views_prior)
autoplot(page_2016_FIFA_Club_World_Cup_views_prior)
autoplot(page_2016_FIFA_Club_World_Cup_views_post)
# replacing the outlier with mean
page_2016_FIFA_Club_World_Cup_views_prior[page_2016_FIFA_Club_World_Cup_views_prior>1000] <- mean(page_2016_FIFA_Club_World_Cup_views_prior[!page_2016_FIFA_Club_World_Cup_views_prior>1000])
# plotting
autoplot(page_2016_FIFA_Club_World_Cup_views_prior)
BoxCox.lambda(page_2016_FIFA_Club_World_Cup_views_prior)
page_2016_FIFA_Club_World_Cup_views_prior_transformed <- BoxCox(page_2016_FIFA_Club_World_Cup_views_prior,lambda = -0.455303)
autoplot(page_2016_FIFA_Club_World_Cup_views_prior_transformed)
tsdisplay(page_2016_FIFA_Club_World_Cup_views_prior_transformed)
# differencing
page_2016_FIFA_Club_World_Cup_views_prior_transformed_diff <- diff(page_2016_FIFA_Club_World_Cup_views_prior_transformed,lag = 2)
# visulalizing
tsdisplay(page_2016_FIFA_Club_World_Cup_views_prior_transformed_diff)
auto.arima(page_2016_FIFA_Club_World_Cup_views_prior, lambda = 'auto', seasonal = TRUE, stationary = FALSE)
m1 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),xreg = data.frame(x=c(rep(0,200),1:134)))
m1
exp_intervention=c()
for (x in 1:150) {
exp_intervention <- append(exp_intervention,exp(x))
}
exp_intervention <- ts(exp_intervention)
m2 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),
xreg =data.frame(x=c(rep(0,200),Model.ets$fitted[201:334])))
m1 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),xreg = data.frame(x=c(rep(0,200),1:134)))
m1
exp_intervention=c()
for (x in 1:150) {
exp_intervention <- append(exp_intervention,exp(x))
}
exp_intervention <- ts(exp_intervention)
Model.ets<-ets(exp_intervention)
m2 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),
xreg =data.frame(x=c(rep(0,200),Model.ets$fitted[201:334])))
m1 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),xreg = data.frame(x=c(rep(0,200),1:134)))
m1
exp_intervention=c()
for (x in 1:150) {
exp_intervention <- append(exp_intervention,exp(x))
}
exp_intervention <- ts(exp_intervention)
Model.ets<-ets(exp_intervention)
m2 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),
xreg =data.frame(x=c(rep(0,200),Model.ets$fitted[201:334])))
m1 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),xreg = data.frame(x=c(rep(0,200),1:134)))
m1
exp_intervention=c()
for (x in 1:150) {
exp_intervention <- append(exp_intervention,exp(x))
}
exp_intervention <- ts(exp_intervention)
Model.ets<-ets(page_2016_FIFA_Club_World_Cup_views)
m2 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),
xreg =data.frame(x=c(rep(0,200),Model.ets$fitted[201:334])))
m2
m3 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),
xreg =Model.ets$fitted)
m3
m1 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),xreg = data.frame(x=c(rep(0,200),1:134)))
m1
exp_intervention=c()
for (x in 1:150) {
exp_intervention <- append(exp_intervention,exp(x))
}
exp_intervention <- ts(exp_intervention)
Model.ets<-ets(page_2016_FIFA_Club_World_Cup_views)
m2 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),
xreg =data.frame(x=c(rep(0,200),Model.ets$fitted[201:334])))
m2
m3 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),
xreg =Model.ets$fitted)
m3
m1 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),xreg = data.frame(x=c(rep(0,200),1:134)))
m1
Model.ets<-ets(page_2016_FIFA_Club_World_Cup_views)
m2 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),
xreg =data.frame(x=c(rep(0,200),Model.ets$fitted[201:334])))
m2
m3 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),
xreg =Model.ets$fitted)
m3
m1 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),xreg = data.frame(x=c(rep(0,200),1:134)))
m1
auto.arima(page_2016_FIFA_Club_World_Cup_views_prior, lambda = 'auto', seasonal = TRUE, stationary = FALSE)
m1 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),xreg = data.frame(x=c(rep(0,200),1:134)))
m1
Model.ets<-ets(page_2016_FIFA_Club_World_Cup_views)
m2 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),
xreg =data.frame(x=c(rep(0,200),Model.ets$fitted[201:334])))
m2
m3 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),
xreg =Model.ets$fitted)
m3
m1 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),xreg = data.frame(x=c(rep(0,200),1:134)))
m1
Model.ets<-ets(page_2016_FIFA_Club_World_Cup_views)
m2 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),
xreg =data.frame(x=c(rep(0,200),Model.ets$fitted[201:334])))
m2
m3 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),
xreg =Model.ets$fitted)
m3
values <- auto.arima(
page_2016_FIFA_Club_World_Cup_views, lambda = 0
)
values
m1 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),xreg = data.frame(x=c(rep(0,200),1:134)))
m1
Model.ets<-ets(page_2016_FIFA_Club_World_Cup_views)
m2 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),
xreg =data.frame(x=c(rep(0,200),Model.ets$fitted[201:334])))
m2
m3 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),
xreg =Model.ets$fitted)
m3
values <- auto.arima(
page_2016_FIFA_Club_World_Cup_views, lambda = 0
)
m4 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),
xreg =values$fitted)
m3
m1 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),xreg = data.frame(x=c(rep(0,200),1:134)))
m1
Model.ets<-ets(page_2016_FIFA_Club_World_Cup_views)
m2 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),
xreg =data.frame(x=c(rep(0,200),Model.ets$fitted[201:334])))
m2
m3 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),
xreg =Model.ets$fitted)
m3
values <- auto.arima(
page_2016_FIFA_Club_World_Cup_views, lambda = 0
)
m4 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),
xreg =values$fitted)
m4
values <- auto.arima(
page_2016_FIFA_Club_World_Cup_views, lambda = 0
)
m4 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),
xreg =values$fitted)
m4
m1 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),xreg = data.frame(x=c(rep(0,200),1:134)))
m1
Model.ets<-ets(page_2016_FIFA_Club_World_Cup_views)
m2 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),
xreg =data.frame(x=c(rep(0,200),Model.ets$fitted[201:334])))
m2
m3 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),
xreg =Model.ets$fitted)
m3
values <- auto.arima(
page_2016_FIFA_Club_World_Cup_views, lambda = 2.18
)
m4 <- arimax(page_2016_FIFA_Club_World_Cup_views,order = c(0,1,3),
xreg =values$fitted)
m4
